import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

def safe_load_data(uploaded_file):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –æ—à–∏–±–æ–∫"""
    try:
        data = pd.read_csv(uploaded_file)
        if data.empty:
            st.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            return None
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def find_suitable_columns(data):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    # 1. –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å—Ç–æ–ª–±—Ü—ã —Å –ø–æ—Ö–æ–∂–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
    possible_score_columns = [col for col in data.columns 
                           if 'score' in col.lower() or 'satisfaction' in col.lower()]
    
    # 2. –ò—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
    numeric_cols = data.select_dtypes(include=[np.number]).columns.tolist()
    
    # 3. –ò—â–µ–º —Å—Ç–æ–ª–±—Ü—ã —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ (–¥–∏–∞–ø–∞–∑–æ–Ω 1-5 –∏–ª–∏ 1-10)
    suitable_cols = []
    for col in data.columns:
        try:
            unique_vals = pd.to_numeric(data[col].dropna()).unique()
            if all(1 <= x <= 10 for x in unique_vals):
                suitable_cols.append(col)
        except:
            continue
    
    return {
        'possible_scores': possible_score_columns,
        'numeric_cols': numeric_cols,
        'suitable_cols': suitable_cols
    }

def smart_plot(data, column_name):
    """–£–º–Ω–æ–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–æ–π"""
    try:
        fig, ax = plt.subplots(figsize=(10, 6))
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –≥—Ä–∞—Ñ–∏–∫–∞
        if data[column_name].nunique() > 10:
            data[column_name].hist(bins=20, ax=ax, color='#1f77b4')
            ax.set_ylabel('–ß–∞—Å—Ç–æ—Ç–∞')
        else:
            value_counts = data[column_name].value_counts().sort_index()
            value_counts.plot(kind='bar', ax=ax, color='#2ca02c')
            ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        
        ax.set_title(f'–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ {column_name}')
        ax.set_xlabel(column_name)
        plt.xticks(rotation=45)
        plt.tight_layout()
        st.pyplot(fig)
        plt.close()
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫: {str(e)}")

def main():
    st.title("üìä –£–º–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("""
    <style>
    .small-font { font-size:12px !important; color:gray; }
    </style>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à CSV —Ñ–∞–π–ª", type=["csv"])
    
    if uploaded_file is not None:
        data = safe_load_data(uploaded_file)
        if data is not None:
            st.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            # –ê–Ω–∞–ª–∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            columns_info = find_suitable_columns(data)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
                st.write(data.head())
                st.markdown(f'<p class="small-font">–í—Å–µ —Å—Ç–æ–ª–±—Ü—ã: {list(data.columns)}</p>', 
                          unsafe_allow_html=True)
            
            # –û—Å–Ω–æ–≤–Ω–æ–π –∞–Ω–∞–ª–∏–∑
            st.header("–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: –ù–∞—à–ª–∏ –∏–¥–µ–∞–ª—å–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü
            if columns_info['suitable_cols']:
                best_col = columns_info['suitable_cols'][0]
                st.info(f"–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±—Ä–∞–Ω —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: '{best_col}'")
                smart_plot(data, best_col)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: –ï—Å—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Å—Ç–æ–ª–±—Ü—ã
            elif columns_info['possible_scores']:
                selected_col = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (–∞–≤—Ç–æ–ø–æ–¥–±–æ—Ä):",
                    columns_info['possible_scores']
                )
                smart_plot(data, selected_col)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ï—Å—Ç—å —á–∏—Å–ª–æ–≤—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            elif columns_info['numeric_cols']:
                selected_col = st.selectbox(
                    "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π —Å—Ç–æ–ª–±–µ—Ü –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                    columns_info['numeric_cols']
                )
                smart_plot(data, selected_col)
            
            # –í–∞—Ä–∏–∞–Ω—Ç 4: –°–æ–≤—Å–µ–º –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
            else:
                st.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —á–∏—Å–ª–æ–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
                
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º—ã–π —Å—Ç–æ–ª–±–µ—Ü
                all_cols = data.columns.tolist()
                if all_cols:
                    st.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ª—é–±–æ–π —Å—Ç–æ–ª–±–µ—Ü:")
                    selected_col = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–æ–ª–±–µ—Ü:", all_cols)
                    
                    try:
                        smart_plot(data, selected_col)
                    except:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–æ–ª–±–µ—Ü")
                        st.write("–ü—Ä–∏–º–µ—Ä –∑–Ω–∞—á–µ–Ω–∏–π:", data[selected_col].head().tolist())

if __name__ == "__main__":
    main()