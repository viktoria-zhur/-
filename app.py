import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
import plotly.express as px
import io

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
    page_icon="‚úàÔ∏è",
    layout="wide"
)

# –ö—ç—à–∏—Ä—É–µ–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
@st.cache_data
def load_data_from_csv(uploaded_file):
    try:
        data = pd.read_csv(uploaded_file)
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

@st.cache_data
def clean_data(data):
    if data is None or data.empty:
        return None

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    data_clean = data.dropna()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    required_columns = {'satisfaction_score', 'flight_id'}
    if not required_columns.issubset(data_clean.columns):
        missing = required_columns - set(data_clean.columns)
        st.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing)}")
        return None
        
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    data_clean = data_clean[
        (data_clean['satisfaction_score'] >= 1) &
        (data_clean['satisfaction_score'] <= 5)
    ].copy()
    
    return data_clean

# –§—É–Ω–∫—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
def show_distribution(data, title, color='skyblue'):
    try:
        fig, ax = plt.subplots(figsize=(8, 5))
        data['satisfaction_score'].hist(bins=20, color=color, ax=ax)
        ax.set_title(title, fontsize=14)
        ax.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=12)
        ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', fontsize=12)
        plt.tight_layout()
        st.pyplot(fig)
        plt.close()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {str(e)}")

def plot_regression(X, y, feature_name):
    try:
        model = LinearRegression()
        model.fit(X, y)

        fig, ax = plt.subplots(figsize=(8, 5))
        ax.scatter(X, y, color='blue', alpha=0.5, label='–î–∞–Ω–Ω—ã–µ')
        ax.plot(X, model.predict(X), color='red', linewidth=2, label='–õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏')
        ax.set_title(f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç {feature_name}', fontsize=14)
        ax.set_xlabel(feature_name, fontsize=12)
        ax.set_ylabel('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=12)
        ax.legend()
        plt.tight_layout()
        st.pyplot(fig)
        plt.close()
        
        return model.coef_
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —Ä–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")
        return None

def plot_clusters(data, n_clusters=3):
    try:
        kmeans = KMeans(n_clusters=n_clusters, random_state=42)
        clusters = kmeans.fit_predict(data)

        fig = px.scatter(
            data, 
            x=data.columns[0], 
            y=data.columns[1],
            color=clusters,
            title=f'–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è (k={n_clusters})',
            labels={'color': '–ö–ª–∞—Å—Ç–µ—Ä'},
            opacity=0.7
        )
        st.plotly_chart(fig, use_container_width=True)
        
        return clusters
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
        return None

def generate_flight_report(data):
    try:
        report = data.groupby('flight_id')['satisfaction_score'].agg(['mean', 'count', 'std'])
        report.columns = ['–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']
        report = report.sort_values('–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', ascending=False)

        fig = px.bar(
            report,
            x='–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å',
            y=report.index,
            orientation='h',
            error_x='–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ',
            title='–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–π—Å–∞–º',
            color='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤',
            color_continuous_scale='Purples'
        )
        st.plotly_chart(fig, use_container_width=True)
        
        return report
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
    st.markdown("""
    <style>
    .main {background-color: #f5f5f5;}
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
        type=["csv"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: satisfaction_score, flight_id –∏ –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"
    )

    if uploaded_file is not None:
        data = load_data_from_csv(uploaded_file)
        if data is not None:
            st.session_state['raw_data'] = data
            st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data):,}")

    if 'raw_data' in st.session_state:
        analysis_option = st.sidebar.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º"],
            index=0
        )

        data = st.session_state['raw_data']

        if analysis_option == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
            st.header("üîç –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            show_distribution(data, '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ satisfaction_score (–∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)')
            
            with st.expander("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                st.dataframe(data.describe().T.style.background_gradient(cmap='Blues'))

        elif analysis_option == "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
            st.header("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
            
            if 'clean_data' not in st.session_state:
                st.session_state['clean_data'] = clean_data(data)

            clean_data_df = st.session_state['clean_data']
            
            if clean_data_df is None:
                return

            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", len(data))
                st.metric("–ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏", len(clean_data_df))
                st.metric("–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π", len(data) - len(clean_data_df))

            with col2:
                st.write("**–¢–∏–ø—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:**")
                st.write("- –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (NaN)")
                st.write("- –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è satisfaction_score (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-5)")

            show_distribution(clean_data_df, '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏', 'orange')

        elif analysis_option == "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
            st.header("üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

            if 'clean_data' not in st.session_state or st.session_state['clean_data'] is None:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
                return

            clean_data_df = st.session_state['clean_data']
            numeric_cols = clean_data_df.select_dtypes(include=['number']).columns.tolist()
            numeric_cols = [col for col in numeric_cols if col != 'satisfaction_score']

            if not numeric_cols:
                st.error("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                return

            selected_feature = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                numeric_cols,
                index=0
            )

            coef = plot_regression(
                clean_data_df[[selected_feature]],
                clean_data_df['satisfaction_score'],
                selected_feature
            )

            if coef is not None:
                st.info(f"""
                **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:** `{coef[0]:.4f}`

                **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**
                - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å —Ä–æ—Å—Ç–æ–º '{selected_feature}' —Ä–∞—Å—Ç–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
                - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
                """)

        elif analysis_option == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è":
            st.header("üß© –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")

            if 'clean_data' not in st.session_state or st.session_state['clean_data'] is None:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
                return

            clean_data_df = st.session_state['clean_data']
            numeric_cols = clean_data_df.select_dtypes(include=['number']).columns.tolist()

            if len(numeric_cols) < 2:
                st.error("–î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞!")
                return

            col1, col2, col3 = st.columns(3)
            with col1:
                feature1 = st.selectbox("–ü–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫", numeric_cols, index=0)
            with col2:
                feature2 = st.selectbox("–í—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫", numeric_cols, index=min(1, len(numeric_cols)-1))
            with col3:
                n_clusters = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", 2, 10, 3)

            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é"):
                clusters = plot_clusters(
                    clean_data_df[[feature1, feature2]],
                    n_clusters
                )

                if clusters is not None:
                    st.session_state['clusters'] = clusters
                    st.success(f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–∞!")
                    st.dataframe(pd.Series(clusters).value_counts().rename("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ"))

        elif analysis_option == "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º":
            st.header("üìä –û—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º")

            if 'clean_data' not in st.session_state or st.session_state['clean_data'] is None:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
                return

            clean_data_df = st.session_state['clean_data']
            report = generate_flight_report(clean_data_df)
            
            if report is not None:
                st.dataframe(
                    report.style.background_gradient(cmap='Purples', subset=['–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'])
                )

                csv = report.to_csv().encode('utf-8')
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ CSV",
                    data=csv,
                    file_name='flight_satisfaction_report.csv',
                    mime='text/csv'
                )

if __name__ == "__main__":
    main()