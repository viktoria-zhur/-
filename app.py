import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.cluster import KMeans
import io

# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞
def load_data_from_csv(uploaded_file):
    try:
        data = pd.read_csv(uploaded_file)
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")
        return None

def show_initial_distribution(data):
    if 'satisfaction_score' not in data.columns:
        st.error("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'satisfaction_score'")
        return
        
    fig, ax = plt.subplots(figsize=(8, 5))
    data['satisfaction_score'].hist(bins=20, color='skyblue', ax=ax)
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ satisfaction_score (–∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)', fontsize=14)
    ax.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', fontsize=12)
    plt.tight_layout()
    st.pyplot(fig)

def clean_data(data):
    if data is None:
        return None

    # –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    data_clean = data.dropna()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–æ–ª–±—Ü–∞ satisfaction_score
    if 'satisfaction_score' not in data_clean.columns:
        st.error("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'satisfaction_score'")
        return None
        
    # –£–¥–∞–ª–µ–Ω–∏–µ –∞–Ω–æ–º–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    data_clean = data_clean[
        (data_clean['satisfaction_score'] >= 1) &
        (data_clean['satisfaction_score'] <= 5)
    ]
    return data_clean

def show_cleaned_distribution(data_clean):
    if data_clean is None or 'satisfaction_score' not in data_clean.columns:
        return
        
    fig, ax = plt.subplots(figsize=(8, 5))
    data_clean['satisfaction_score'].hist(bins=20, color='orange', ax=ax)
    ax.set_title('–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏', fontsize=14)
    ax.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=12)
    ax.set_ylabel('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', fontsize=12)
    plt.tight_layout()
    st.pyplot(fig)

def perform_regression_analysis(X, y):
    model = LinearRegression()
    model.fit(X, y)

    if X.shape[1] == 1:
        fig, ax = plt.subplots(figsize=(8, 5))
        ax.scatter(X, y, color='blue', alpha=0.5, label='–î–∞–Ω–Ω—ã–µ')
        ax.plot(X, model.predict(X), color='red', linewidth=2, label='–õ–∏–Ω–∏—è —Ä–µ–≥—Ä–µ—Å—Å–∏–∏')
        ax.set_title(f'–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –æ—Ç {X.columns[0]}', fontsize=14)
        ax.set_xlabel(X.columns[0], fontsize=12)
        ax.set_ylabel('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=12)
        ax.legend()
        plt.tight_layout()
        st.pyplot(fig)

    return model.coef_

def perform_clustering(data, n_clusters=3):
    kmeans = KMeans(n_clusters=n_clusters, random_state=42)
    clusters = kmeans.fit_predict(data)

    if data.shape[1] >= 2:
        fig, ax = plt.subplots(figsize=(8, 6))
        scatter = ax.scatter(
            data.iloc[:, 0],
            data.iloc[:, 1],
            c=clusters,
            cmap='viridis',
            alpha=0.6,
            s=50
        )
        ax.set_title(f'–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ {data.columns[0]} –∏ {data.columns[1]}', fontsize=14)
        ax.set_xlabel(data.columns[0], fontsize=12)
        ax.set_ylabel(data.columns[1], fontsize=12)
        plt.colorbar(scatter, label='–ö–ª–∞—Å—Ç–µ—Ä')
        plt.tight_layout()
        st.pyplot(fig)

    return clusters

def generate_report(data):
    if 'flight_id' not in data.columns or 'satisfaction_score' not in data.columns:
        st.error("–î–ª—è –æ—Ç—á–µ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —Å—Ç–æ–ª–±—Ü—ã 'flight_id' –∏ 'satisfaction_score'")
        return None
        
    report = data.groupby('flight_id')['satisfaction_score'].agg(['mean', 'count', 'std'])
    report.columns = ['–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']

    fig, ax = plt.subplots(figsize=(12, 6))
    report['–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'].sort_values().plot(
        kind='barh',
        color='purple',
        ax=ax,
        xerr=report['–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ']
    )
    ax.set_title('–°—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ —Ä–µ–π—Å–∞–º', fontsize=14)
    ax.set_xlabel('–£—Ä–æ–≤–µ–Ω—å —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏', fontsize=12)
    ax.set_ylabel('–ù–æ–º–µ—Ä —Ä–µ–π—Å–∞', fontsize=12)
    plt.tight_layout()
    st.pyplot(fig)

    return report

def main():
    st.set_page_config(
        page_title="–ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤",
        page_icon="‚úàÔ∏è",
        layout="wide"
    )

    st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
    st.markdown("""
    <style>
    .main {background-color: #f5f5f5;}
    </style>
    """, unsafe_allow_html=True)

    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV-—Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏",
        type=["csv"],
        help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å—Ç–æ–ª–±—Ü—ã: satisfaction_score, flight_id –∏ –¥—Ä—É–≥–∏–µ —á–∏—Å–ª–æ–≤—ã–µ –ø—Ä–∏–∑–Ω–∞–∫–∏"
    )

    if uploaded_file is not None:
        data = load_data_from_csv(uploaded_file)
        if data is not None:
            st.session_state['raw_data'] = data
            st.success(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(data):,}")

    if 'raw_data' in st.session_state:
        analysis_option = st.sidebar.radio(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
            ["–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö", "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑", "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è", "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º"],
            index=0
        )

        data = st.session_state['raw_data']

        if analysis_option == "–û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö":
            st.header("üîç –û–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö")
            show_initial_distribution(data)

            with st.expander("–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"):
                st.dataframe(data.describe().T.style.background_gradient(cmap='Blues'))

        elif analysis_option == "–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö":
            st.header("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")

            if 'clean_data' not in st.session_state:
                st.session_state['clean_data'] = clean_data(data)

            clean_data_df = st.session_state['clean_data']
            
            if clean_data_df is None:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤.")
                return

            col1, col2 = st.columns(2)
            with col1:
                st.metric("–ò—Å—Ö–æ–¥–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π", len(data))
                st.metric("–ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏", len(clean_data_df))
                st.metric("–£–¥–∞–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π", len(data) - len(clean_data_df))

            with col2:
                st.write("**–¢–∏–ø—ã —É–¥–∞–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:**")
                st.write("- –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (NaN)")
                st.write("- –ê–Ω–æ–º–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è satisfaction_score (–≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ 1-5)")

            show_cleaned_distribution(clean_data_df)

        elif analysis_option == "–†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑":
            st.header("üìà –†–µ–≥—Ä–µ—Å—Å–∏–æ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑")

            if 'clean_data' not in st.session_state:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
                st.stop()

            clean_data_df = st.session_state['clean_data']
            
            if clean_data_df is None:
                st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –æ—á–∏—Å—Ç–∫–∏.")
                return
                
            if 'satisfaction_score' not in clean_data_df.columns:
                st.error("–í –¥–∞–Ω–Ω—ã—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'satisfaction_score'")
                return

            numeric_cols = clean_data_df.select_dtypes(include=['number']).columns.tolist()
            numeric_cols = [col for col in numeric_cols if col != 'satisfaction_score']

            if not numeric_cols:
                st.error("–í –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
                st.stop()

            selected_feature = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–∑–Ω–∞–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:",
                numeric_cols,
                index=0
            )

            coef = perform_regression_analysis(
                clean_data_df[[selected_feature]],
                clean_data_df['satisfaction_score']
            )

            st.info(f"""
            **–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ä–µ–≥—Ä–µ—Å—Å–∏–∏:** `{coef[0]:.4f}`

            **–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è:**
            - –ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç, —á—Ç–æ —Å —Ä–æ—Å—Ç–æ–º '{selected_feature}' —Ä–∞—Å—Ç–µ—Ç —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
            - –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—É—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
            """)

        elif analysis_option == "–ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è":
            st.header("üß© –ö–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")

            if 'clean_data' not in st.session_state:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
                st.stop()

            clean_data_df = st.session_state['clean_data']
            
            if clean_data_df is None:
                st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –æ—á–∏—Å—Ç–∫–∏.")
                return

            numeric_cols = clean_data_df.select_dtypes(include=['number']).columns.tolist()

            if len(numeric_cols) < 2:
                st.error("–î–ª—è –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º 2 —á–∏—Å–ª–æ–≤—ã—Ö –ø—Ä–∏–∑–Ω–∞–∫–∞!")
                st.stop()

            col1, col2, col3 = st.columns(3)

            with col1:
                feature1 = st.selectbox("–ü–µ—Ä–≤—ã–π –ø—Ä–∏–∑–Ω–∞–∫", numeric_cols, index=0)

            with col2:
                default_idx = 1 if len(numeric_cols) > 1 else 0
                feature2 = st.selectbox("–í—Ç–æ—Ä–æ–π –ø—Ä–∏–∑–Ω–∞–∫", numeric_cols, index=default_idx)

            with col3:
                n_clusters = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª–∞—Å—Ç–µ—Ä–æ–≤", 2, 10, 3)

            if st.button("–í—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∞—Å—Ç–µ—Ä–∏–∑–∞—Ü–∏—é"):
                clusters = perform_clustering(
                    clean_data_df[[feature1, feature2]],
                    n_clusters
                )

                if clusters is not None:
                    st.session_state['clusters'] = clusters
                    st.success(f"–ü–∞—Å—Å–∞–∂–∏—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {n_clusters} –∫–ª–∞—Å—Ç–µ—Ä–∞!")

                    cluster_stats = pd.Series(clusters).value_counts().sort_index()
                    st.dataframe(cluster_stats.rename("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ"))

        elif analysis_option == "–û—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º":
            st.header("üìä –û—Ç—á–µ—Ç –ø–æ —Ä–µ–π—Å–∞–º")

            if 'clean_data' not in st.session_state:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ—á–∏—Å—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö!")
                st.stop()

            clean_data_df = st.session_state['clean_data']
            
            if clean_data_df is None:
                st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –æ—á–∏—â–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –æ—à–∏–±–æ–∫ –Ω–∞ —ç—Ç–∞–ø–µ –æ—á–∏—Å—Ç–∫–∏.")
                return

            report = generate_report(clean_data_df)
            
            if report is None:
                return

            st.dataframe(
                report.sort_values('–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å', ascending=False)
                .style.background_gradient(cmap='Purples', subset=['–°—Ä–µ–¥–Ω—è—è —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å'])
            )

            csv = report.to_csv().encode('utf-8')
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç –≤ CSV",
                data=csv,
                file_name='flight_satisfaction_report.csv',
                mime='text/csv'
            )

if __name__ == "__main__":
    main()