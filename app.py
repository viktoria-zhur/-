import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt

def safe_load_data(uploaded_file):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel"""
    try:
        data = pd.read_excel(uploaded_file)
        if data.empty:
            st.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö")
            return None
        return data
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}")
        return None

def analyze_satisfaction(data):
    """–ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    st.header("–ê–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ satisfaction
    fig, ax = plt.subplots(figsize=(8, 5))
    data['satisfaction'].value_counts().plot(kind='bar', color=['#ff9999','#66b3ff'])
    plt.title("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    plt.xlabel("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    plt.xticks(rotation=45)
    st.pyplot(fig)
    plt.close()
    
    # –í–ª–∏—è–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    service_columns = [
        'Inflight wifi service',
        'Departure/Arrival time convenient',
        'Ease of Online booking',
        'Gate location',
        'Food and drink',
        'Online boarding',
        'Seat comfort',
        'Inflight entertainment',
        'On-board service',
        'Leg room service',
        'Baggage handling',
        'Checkin service',
        'Inflight service',
        'Cleanliness'
    ]
    
    st.subheader("–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º")
    mean_ratings = data.groupby('satisfaction')[service_columns].mean().T
    fig, ax = plt.subplots(figsize=(12, 8))
    mean_ratings.plot(kind='bar', ax=ax, color=['#ff9999','#66b3ff'])
    plt.title("–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    plt.xlabel("–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–µ—Ä–≤–∏—Å–∞")
    plt.ylabel("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞")
    plt.xticks(rotation=45)
    plt.legend(title="–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å")
    plt.tight_layout()
    st.pyplot(fig)
    plt.close()

def analyze_service_ratings(data):
    """–ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    st.header("–ê–Ω–∞–ª–∏–∑ –æ—Ü–µ–Ω–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
    
    service_columns = [
        'Inflight wifi service',
        'Departure/Arrival time convenient',
        'Ease of Online booking',
        'Gate location',
        'Food and drink',
        'Online boarding',
        'Seat comfort',
        'Inflight entertainment',
        'On-board service',
        'Leg room service',
        'Baggage handling',
        'Checkin service',
        'Inflight service',
        'Cleanliness'
    ]
    
    selected_service = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞", service_columns)
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫
    fig, ax = plt.subplots(figsize=(10, 6))
    data[selected_service].value_counts().sort_index().plot(kind='bar', color='#1f77b4')
    plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –¥–ª—è {selected_service}")
    plt.xlabel("–û—Ü–µ–Ω–∫–∞")
    plt.ylabel("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    st.pyplot(fig)
    plt.close()
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç —Ç–∏–ø–∞ –∫–ª–∏–µ–Ω—Ç–∞ (–±–µ–∑ seaborn)
    fig, ax = plt.subplots(figsize=(10, 6))
    data.boxplot(column=selected_service, by='Customer Type', ax=ax)
    plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ {selected_service} –ø–æ —Ç–∏–ø—É –∫–ª–∏–µ–Ω—Ç–∞")
    plt.suptitle('')
    st.pyplot(fig)
    plt.close()
    
    # –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –æ—Ç –∫–ª–∞—Å—Å–∞ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è (–±–µ–∑ seaborn)
    fig, ax = plt.subplots(figsize=(10, 6))
    data.boxplot(column=selected_service, by='Class', ax=ax)
    plt.title(f"–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ {selected_service} –ø–æ –∫–ª–∞—Å—Å—É –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è")
    plt.suptitle('')
    st.pyplot(fig)
    plt.close()

def main():
    st.title("‚úàÔ∏è –ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–≤–∏–∞–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
    st.markdown("""
    <style>
    .small-font { font-size:12px !important; color:gray; }
    </style>
    """, unsafe_allow_html=True)
    
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à Excel —Ñ–∞–π–ª", type=["xlsx", "xls"])
    
    if uploaded_file is not None:
        data = safe_load_data(uploaded_file)
        if data is not None:
            st.success(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π")
            
            required_columns = ['satisfaction', 'Inflight wifi service', 'Customer Type', 'Class']
            if not all(col in data.columns for col in required_columns):
                st.error("–§–∞–π–ª –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤")
                st.write("–ù–∞–π–¥–µ–Ω—ã —Å—Ç–æ–ª–±—Ü—ã:", list(data.columns))
                return
            
            with st.expander("üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö"):
                st.write("–ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫:")
                st.write(data.head())
                st.markdown(f'<p class="small-font">–í—Å–µ —Å—Ç–æ–ª–±—Ü—ã: {list(data.columns)}</p>', 
                          unsafe_allow_html=True)
            
            analyze_satisfaction(data)
            analyze_service_ratings(data)
            
            st.header("–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ª–µ—Ç–∞ (–º–∏–Ω)", round(data['Departure Delay in Minutes'].mean(), 1))
                st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏–ª–µ—Ç–∞ (–º–∏–Ω)", round(data['Arrival Delay in Minutes'].mean(), 1))
            
            with col2:
                loyal_percent = round(data['Customer Type'].value_counts(normalize=True)['Loyal Customer']*100, 1)
                st.metric("–î–æ–ª—è –ª–æ—è–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", f"{loyal_percent}%")
                st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", round(data['Age'].mean(), 1))

if __name__ == "__main__":
    main()