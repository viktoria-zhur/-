import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import plotly.express as px
from io import BytesIO
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(layout="wide", page_title="‚úàÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∞–≤–∏–∞–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", page_icon="‚úàÔ∏è")

def safe_load_data(uploaded_file):
    """–£–ª—É—á—à–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π CSV –∏ Excel"""
    try:
        if uploaded_file.name.endswith('.csv'):
            return pd.read_csv(uploaded_file)
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            return pd.read_excel(uploaded_file, engine='openpyxl')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {str(e)}")
        return None

def show_data_overview(data):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö"""
    with st.expander("üìä –ü–æ–ª–Ω—ã–π –æ–±–∑–æ—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**–û—Å–Ω–æ–≤–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏**")
            st.dataframe(data.describe(include='all').T.style.background_gradient(cmap='Blues'))
            
        with col2:
            st.markdown("**–ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è**")
            missing = data.isnull().sum().to_frame('–ü—Ä–æ–ø—É—Å–∫–∏')
            st.dataframe(missing[missing['–ü—Ä–æ–ø—É—Å–∫–∏'] > 0].style.background_gradient(cmap='Reds'))

def analyze_satisfaction(data):
    """–£–≥–ª—É–±–ª—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏"""
    st.header("üîç –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏", divider='rainbow')
    
    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –ø–æ–ª—É –∏ –∫–ª–∞—Å—Å—É
    fig = px.sunburst(data, path=['Gender', 'Class', 'satisfaction'], 
                     color='satisfaction', color_discrete_map={
                         'satisfied': '#2ca02c',
                         'neutral or dissatisfied': '#d62728'
                     })
    st.plotly_chart(fig, use_container_width=True)
    
    # –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    age_bins = [0, 18, 30, 45, 60, 100]
    data['Age Group'] = pd.cut(data['Age'], bins=age_bins, 
                              labels=['<18', '18-30', '30-45', '45-60', '60+'])
    
    fig = px.histogram(data, x='Age Group', color='satisfaction', barmode='group',
                      title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–º –≥—Ä—É–ø–ø–∞–º")
    st.plotly_chart(fig, use_container_width=True)

def service_analysis(data):
    """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤"""
    st.header("üõéÔ∏è –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–æ–≤", divider='rainbow')
    
    services = [
        'Inflight wifi service', 'Food and drink', 'Seat comfort',
        'Inflight entertainment', 'On-board service', 'Cleanliness'
    ]
    
    # –¢–µ–ø–ª–æ–≤–∞—è –∫–∞—Ä—Ç–∞ –∫–æ—Ä—Ä–µ–ª—è—Ü–∏–π
    st.subheader("–ö–æ—Ä—Ä–µ–ª—è—Ü–∏—è –º–µ–∂–¥—É –æ—Ü–µ–Ω–∫–∞–º–∏ —Å–µ—Ä–≤–∏—Å–æ–≤")
    corr_matrix = data[services].corr()
    fig = px.imshow(corr_matrix, text_auto=True, aspect="auto",
                   color_continuous_scale='Viridis')
    st.plotly_chart(fig, use_container_width=True)
    
    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–æ–≤
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ —Å–µ—Ä–≤–∏—Å–æ–≤")
    service_means = data[services].mean().sort_values()
    fig = px.bar(service_means, orientation='h', 
                labels={'value': '–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞', 'index': '–°–µ—Ä–≤–∏—Å'},
                color=service_means.values, color_continuous_scale='Teal')
    st.plotly_chart(fig, use_container_width=True)

def delay_analysis(data):
    """–ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ —Ä–µ–π—Å–æ–≤"""
    st.header("‚è±Ô∏è –ê–Ω–∞–ª–∏–∑ –∑–∞–¥–µ—Ä–∂–µ–∫ —Ä–µ–π—Å–æ–≤", divider='rainbow')
    
    col1, col2 = st.columns(2)
    
    with col1:
        fig = px.box(data, y='Departure Delay in Minutes', 
                    points="all", title="–ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ª–µ—Ç–∞")
        st.plotly_chart(fig, use_container_width=True)
    
    with col2:
        fig = px.scatter(data, x='Departure Delay in Minutes', 
                        y='Arrival Delay in Minutes', color='satisfaction',
                        title="–°–≤—è–∑—å –∑–∞–¥–µ—Ä–∂–µ–∫ –≤—ã–ª–µ—Ç–∞ –∏ –ø—Ä–∏–ª—ë—Ç–∞")
        st.plotly_chart(fig, use_container_width=True)
    
    # –í–ª–∏—è–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–µ–∫ –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å
    data['Delay Impact'] = np.where(
        data['Departure Delay in Minutes'] > 60, '–ë–æ–ª—å—à–∞—è (>60 –º–∏–Ω)',
        np.where(data['Departure Delay in Minutes'] > 30, '–°—Ä–µ–¥–Ω—è—è (30-60 –º–∏–Ω)', '–ú–∞–ª–µ–Ω—å–∫–∞—è (<30 –º–∏–Ω)'))
    
    fig = px.histogram(data, x='Delay Impact', color='satisfaction', 
                      barmode='group', title="–í–ª–∏—è–Ω–∏–µ –∑–∞–¥–µ—Ä–∂–∫–∏ –Ω–∞ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç—å")
    st.plotly_chart(fig, use_container_width=True)

def customer_segmentation(data):
    """–°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤"""
    st.header("üë• –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è –ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤", divider='rainbow')
    
    # RFM-–∞–Ω–∞–ª–∏–∑ (—É–ø—Ä–æ—â—ë–Ω–Ω—ã–π)
    st.subheader("–ê–Ω–∞–ª–∏–∑ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤")
    rfm = data.groupby('id').agg({
        'satisfaction': lambda x: (x == 'satisfied').mean(),
        'Flight Distance': 'sum',
        'Age': 'last'
    }).rename(columns={
        'satisfaction': 'LoyaltyScore',
        'Flight Distance': 'TotalDistance',
        'Age': 'Age'
    })
    
    fig = px.scatter(rfm, x='TotalDistance', y='LoyaltyScore', 
                    color='Age', size='TotalDistance',
                    hover_data=['Age'], 
                    title="RFM-–∞–Ω–∞–ª–∏–∑ (Distance vs Loyalty)")
    st.plotly_chart(fig, use_container_width=True)

def main():
    st.title("‚úàÔ∏è –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π –∞–Ω–∞–ª–∏–∑ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏ –∞–≤–∏–∞–ø–∞—Å—Å–∞–∂–∏—Ä–æ–≤")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞
    uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –≤–∞—à —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ (CSV –∏–ª–∏ Excel)", 
                                   type=["csv", "xlsx", "xls"])
    
    if uploaded_file is not None:
        data = safe_load_data(uploaded_file)
        if data is not None:
            st.success(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(data):,} –∑–∞–ø–∏—Å–µ–π")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
            st.subheader("üìä –ö–ª—é—á–µ–≤—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
            cols = st.columns(4)
            with cols[0]:
                st.metric("–î–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", 
                         f"{data['satisfaction'].value_counts(normalize=True).get('satisfied', 0)*100:.1f}%")
            with cols[1]:
                st.metric("–°—Ä–µ–¥–Ω–∏–π –≤–æ–∑—Ä–∞—Å—Ç", f"{data['Age'].mean():.1f} –ª–µ—Ç")
            with cols[2]:
                st.metric("–°—Ä–µ–¥–Ω—è—è –∑–∞–¥–µ—Ä–∂–∫–∞", f"{data['Departure Delay in Minutes'].mean():.1f} –º–∏–Ω")
            with cols[3]:
                st.metric("–õ–æ—è–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤", 
                         f"{data['Customer Type'].value_counts(normalize=True).get('Loyal Customer', 0)*100:.1f}%")
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∞–Ω–∞–ª–∏–∑–∞
            show_data_overview(data)
            analyze_satisfaction(data)
            service_analysis(data)
            delay_analysis(data)
            customer_segmentation(data)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á—ë—Ç–∞
            st.download_button(
                label="üì© –°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (CSV)",
                data=data.to_csv(index=False).encode('utf-8'),
                file_name='airline_passenger_analysis.csv',
                mime='text/csv'
            )

if __name__ == "__main__":
    main()